image: docker:latest
services:
    - docker:dind

# Описываем, из каких ступеней будет состоять наша непрерывная интеграция:
#  - сборка Docker-образа,
#  - прогон тестов Django,
#  - выкат на боевой сервер.
stages:
    - build
    - test
    - deploy

# Описываем инициализационные команды, которые необходимо запускать
#  перед запуском каждой ступени.
# Изменения, внесённые на каждой ступени, не переносятся на другие, так как запуск
#  ступеней осуществляется в чистом Docker-контейнере, который пересоздаётся каждый раз.
before_script:
    # установка pip
    - apk add --no-cache py-pip
    # установка docker-compose
    - pip install docker-compose==1.9.0
    # логин в Gitlab Docker registry
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY

## Сборка Docker-образа
#build:
#    stage: build
#    script:
#        # собственно сборка
#        - docker-compose build
#        # отправка собранного в registry
#        - docker-compose push

## Прогон тестов
#test:
#    stage: test
#    before_script:
#        - apk add python3
#        - apk add --no-cache py3-pip
#        - apk update && apk add postgresql-dev gcc python3-dev musl-dev
#        - pip3 install psycopg2-binary
#        - pip3 install -r requirements.txt
#    script:
#        - pytest statistics_test.py
#        - pytest --cov=weather_statistics_app statistics_test.py
#    coverage: '/^(?i)(TOTAL).*\s+(\d+\%)$/'

deploy:
  stage: deploy
  script:
    - apk add git
    - touch file
    - git init
    - git add .
    - git config --global user.email "$email"
    - git config --global user.name "$name"
    - git commit -m "deploy"
    - git remote add heroku https://heroku:$HEROKU_STAGING_API_KEY@git.heroku.com/weather-statistics1.git
    - git push heroku HEAD:master
    - echo "Deployed to Staging Server https://weather-statistics1.herokuapp.com"
  environment:
    name: staging
    url: https://weather-statistics1.herokuapp.com/
  only:
  - master